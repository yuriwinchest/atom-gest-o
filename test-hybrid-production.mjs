#!/usr/bin/env node

/**
 * Teste de Produ√ß√£o do Servi√ßo H√≠brido
 * Usa os servi√ßos compilados para JavaScript
 */

import { config } from 'dotenv';
import { resolve } from 'path';

// Carregar vari√°veis de ambiente
config({ path: resolve(process.cwd(), 'backblaze-credentials.env') });

console.log('üß™ TESTE DE PRODU√á√ÉO - SERVI√áO H√çBRIDO');
console.log('========================================\n');

async function testProductionHybridService() {
  try {
    console.log('üöÄ Iniciando teste de produ√ß√£o...\n');

    // 1. Verificar se os servi√ßos compilados existem
    console.log('üìÅ Verificando servi√ßos compilados...');

    try {
      const { hybridStorageService } = await import('./dist/services/hybridStorageService.js');
      console.log('‚úÖ Servi√ßo h√≠brido carregado com sucesso!');

      // 2. Testar conectividade
      console.log('\nüîç Testando conectividade dos servi√ßos...');
      const connectivity = await hybridStorageService.testConnectivity();

      console.log('üìä Status de conectividade:');
      console.log(`   Backblaze: ${connectivity.backblaze ? '‚úÖ OK' : '‚ùå FALHOU'}`);
      console.log(`   Supabase: ${connectivity.supabase ? '‚úÖ OK' : '‚ùå FALHOU'}`);

      // 3. Testar upload com arquivo simulado
      console.log('\nüì§ Testando upload via servi√ßo h√≠brido...');

      // Criar arquivo de teste simulado
      const testFile = {
        name: `test-production-${Date.now()}.txt`,
        size: 128,
        type: 'text/plain',
        arrayBuffer: () => Promise.resolve(new TextEncoder().encode('Teste de produ√ß√£o do servi√ßo h√≠brido')),
        stream: () => new ReadableStream({
          start(controller) {
            controller.enqueue(new TextEncoder().encode('Teste de produ√ß√£o do servi√ßo h√≠brido'));
            controller.close();
          }
        })
      };

      console.log('üìÅ Arquivo de teste criado:');
      console.log(`   Nome: ${testFile.name}`);
      console.log(`   Tamanho: ${testFile.size} bytes`);
      console.log(`   Tipo: ${testFile.type}`);

      // Tentar upload
      const result = await hybridStorageService.uploadFile(testFile, {
        category: 'teste-producao',
        description: 'Arquivo de teste do servi√ßo h√≠brido em produ√ß√£o',
        tags: ['teste', 'producao', 'hibrido']
      });

      console.log('\n‚úÖ Upload realizado com sucesso!');
      console.log(`   ID: ${result.id}`);
      console.log(`   Nome: ${result.filename}`);
      console.log(`   Storage: ${result.storage_type}`);
      console.log(`   URL: ${result.url}`);

      // 4. Testar download
      console.log('\nüîó Testando URL de download...');
      const downloadUrl = await hybridStorageService.getDownloadUrl(result);
      console.log(`‚úÖ URL de download: ${downloadUrl}`);

      // 5. Testar estat√≠sticas
      console.log('\nüìä Obtendo estat√≠sticas do storage...');
      const stats = await hybridStorageService.getStorageStats();
      console.log('üìà Estat√≠sticas:');
      console.log(`   Total de arquivos: ${stats.totalFiles}`);
      console.log(`   Arquivos Backblaze: ${stats.backblazeFiles}`);
      console.log(`   Arquivos Supabase: ${stats.supabaseFiles}`);

      // 6. Limpar arquivo de teste
      console.log('\nüóëÔ∏è Removendo arquivo de teste...');
      const deleted = await hybridStorageService.deleteFile(result);
      if (deleted) {
        console.log('‚úÖ Arquivo de teste removido com sucesso!');
      } else {
        console.log('‚ö†Ô∏è Arquivo de teste n√£o foi removido (n√£o cr√≠tico)');
      }

      console.log('\nüéâ TESTE DE PRODU√á√ÉO CONCLU√çDO COM SUCESSO!');
      console.log('‚úÖ Sistema h√≠brido funcionando perfeitamente em produ√ß√£o');
      console.log('‚úÖ Upload autom√°tico via Backblaze ou Supabase');
      console.log('‚úÖ Sistema sempre funcional, nunca mais "tonk esperado"');
      console.log('‚úÖ PRONTO PARA DEPLOY NA VPS! üöÄ');

      return true;

    } catch (importError) {
      console.error('‚ùå Erro ao importar servi√ßo compilado:', importError.message);
      console.log('\nüí° Verificando se o build foi executado...');

      // Verificar se os arquivos existem
      try {
        const fs = await import('fs');
        const servicesDir = './dist/services';

        if (fs.existsSync(servicesDir)) {
          const files = fs.readdirSync(servicesDir);
          console.log('üìÅ Arquivos em dist/services/:', files);
        } else {
          console.log('‚ùå Diret√≥rio dist/services/ n√£o existe');
        }
      } catch (fsError) {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar arquivos');
      }

      return false;
    }

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.error('üí° Verifique a configura√ß√£o dos servi√ßos');
    return false;
  }
}

// Executar teste
testProductionHybridService();
