#!/usr/bin/env node

/**
 * Script para adicionar colunas faltantes na tabela files
 * Usa a API REST do Supabase diretamente
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: 'config-supabase.env' });

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!');
  console.error('Certifique-se de que SUPABASE_URL e SUPABASE_SERVICE_KEY est√£o configuradas.');
  process.exit(1);
}

// Inicializar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function verificarColunasExistentes() {
  console.log('üîç Verificando colunas existentes...');

  try {
    // Tentar fazer uma consulta simples para ver se as colunas existem
    const { data, error } = await supabase
      .from('files')
      .select('id, title, main_subject')
      .limit(1);

    if (error) {
      if (error.message.includes('column') && error.message.includes('does not exist')) {
        console.log('‚ö†Ô∏è Colunas title e/ou main_subject n√£o existem');
        return false;
      }
      console.error('‚ùå Erro ao verificar colunas:', error);
      return false;
    }

    console.log('‚úÖ Colunas title e main_subject j√° existem');
    return true;

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
    return false;
  }
}

async function testarInser√ß√£o() {
  console.log('üß™ Testando inser√ß√£o com novos campos...');

  try {
    const testData = {
      title: 'Documento de Teste - ' + new Date().toISOString(),
      main_subject: 'Teste de Compatibilidade',
      description: 'Teste ap√≥s verificar colunas',
      filename: 'teste-' + Date.now() + '.pdf',
      original_name: 'teste.pdf',
      file_path: '/test/teste.pdf',
      file_size: 1024,
      mime_type: 'application/pdf',
      file_category: 'documento',
      file_extension: 'pdf', // ‚úÖ Campo obrigat√≥rio
      environment: 'development'
    };

    const { data, error } = await supabase
      .from('files')
      .insert(testData)
      .select();

    if (error) {
      console.error('‚ùå Erro no teste de inser√ß√£o:', error);

      if (error.message.includes('column') && error.message.includes('does not exist')) {
        console.log('');
        console.log('üîß SOLU√á√ÉO NECESS√ÅRIA:');
        console.log('As colunas title e main_subject precisam ser adicionadas manualmente.');
        console.log('Execute o seguinte SQL no painel do Supabase:');
        console.log('');
        console.log('ALTER TABLE files ADD COLUMN IF NOT EXISTS title VARCHAR(255);');
        console.log('ALTER TABLE files ADD COLUMN IF NOT EXISTS main_subject VARCHAR(255);');
        console.log('');
      }

      return false;
    }

    console.log('‚úÖ Teste de inser√ß√£o passou!');
    console.log('üìÑ Registro criado com ID:', data[0]?.id);

    // Limpar registro de teste
    if (data[0]?.id) {
      await supabase
        .from('files')
        .delete()
        .eq('id', data[0].id);
      console.log('üßπ Registro de teste removido');
    }

    return true;

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return false;
  }
}

async function listarEstruturaDaTabela() {
  console.log('üìã Listando estrutura atual da tabela files...');

  try {
    // Fazer uma consulta para ver quais campos est√£o dispon√≠veis
    const { data, error } = await supabase
      .from('files')
      .select('*')
      .limit(1);

    if (error) {
      console.error('‚ùå Erro ao consultar tabela:', error);
      return;
    }

    if (data && data.length > 0) {
      const campos = Object.keys(data[0]);
      console.log('üìä Campos encontrados na tabela files:');
      campos.forEach((campo, index) => {
        const status = ['title', 'main_subject'].includes(campo) ? '‚úÖ' : '  ';
        console.log(`${status} ${index + 1}. ${campo}`);
      });

      const temTitle = campos.includes('title');
      const temMainSubject = campos.includes('main_subject');

      console.log('');
      console.log('üîç Status dos campos obrigat√≥rios:');
      console.log(`   title: ${temTitle ? '‚úÖ Existe' : '‚ùå Ausente'}`);
      console.log(`   main_subject: ${temMainSubject ? '‚úÖ Existe' : '‚ùå Ausente'}`);

      return temTitle && temMainSubject;
    } else {
      console.log('‚ö†Ô∏è Tabela files est√° vazia, n√£o foi poss√≠vel verificar estrutura');
      return false;
    }

  } catch (error) {
    console.error('‚ùå Erro ao listar estrutura:', error);
    return false;
  }
}

async function main() {
  console.log('üöÄ Verifica√ß√£o de Compatibilidade do Formul√°rio');
  console.log('==============================================');

  // 1. Listar estrutura atual
  const estruturaOk = await listarEstruturaDaTabela();

  if (estruturaOk) {
    console.log('');
    console.log('üéâ ESTRUTURA EST√Å CORRETA!');
    console.log('Todas as colunas necess√°rias est√£o presentes.');

    // Testar inser√ß√£o
    const testeOk = await testarInser√ß√£o();

    if (testeOk) {
      console.log('');
      console.log('‚úÖ FORMUL√ÅRIO TOTALMENTE COMPAT√çVEL!');
      console.log('O sistema est√° pronto para uso.');
    }
  } else {
    console.log('');
    console.log('‚ùå COLUNAS FALTANTES DETECTADAS');
    console.log('');
    console.log('üîß INSTRU√á√ïES PARA CORRE√á√ÉO:');
    console.log('1. Acesse o painel do Supabase');
    console.log('2. V√° para SQL Editor');
    console.log('3. Execute o seguinte comando:');
    console.log('');
    console.log('ALTER TABLE files');
    console.log('ADD COLUMN IF NOT EXISTS title VARCHAR(255),');
    console.log('ADD COLUMN IF NOT EXISTS main_subject VARCHAR(255);');
    console.log('');
    console.log('4. Execute este script novamente para verificar');
  }
}

main().catch(console.error);
