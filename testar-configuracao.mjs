#!/usr/bin/env node

/**
 * Script para testar se a configura√ß√£o do Supabase est√° sendo carregada
 * Execute: node testar-configuracao.mjs
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üîß Testando Configura√ß√£o do Supabase...\n');

// 1. Verificar se o arquivo existe
const envPath = join(__dirname, 'config-supabase.env');
console.log('üìÅ Verificando arquivo de configura√ß√£o:');
console.log(`   Caminho: ${envPath}`);
console.log(`   Existe: ${fs.existsSync(envPath) ? '‚úÖ Sim' : '‚ùå N√£o'}\n`);

if (!fs.existsSync(envPath)) {
  console.error('‚ùå Arquivo config-supabase.env n√£o encontrado!');
  process.exit(1);
}

// 2. Carregar vari√°veis de ambiente
console.log('üìã Carregando vari√°veis de ambiente...');
dotenv.config({ path: envPath });

// 3. Verificar vari√°veis carregadas
console.log('\nüîë Vari√°veis carregadas:');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_SERVICE_KEY: ${process.env.SUPABASE_SERVICE_KEY ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);
console.log(`   SUPABASE_STORAGE_BUCKET: ${process.env.SUPABASE_STORAGE_BUCKET ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}`);

// 4. Verificar valores das vari√°veis
console.log('\nüìä Valores das vari√°veis:');
console.log(`   URL: ${process.env.SUPABASE_URL || 'N/A'}`);
console.log(`   Anon Key: ${process.env.SUPABASE_ANON_KEY ? `${process.env.SUPABASE_ANON_KEY.substring(0, 20)}...` : 'N/A'}`);
console.log(`   Service Key: ${process.env.SUPABASE_SERVICE_KEY ? `${process.env.SUPABASE_SERVICE_KEY.substring(0, 20)}...` : 'N/A'}`);
console.log(`   Bucket: ${process.env.SUPABASE_STORAGE_BUCKET || 'N/A'}`);

// 5. Testar conex√£o com Supabase
console.log('\nüîå Testando conex√£o com Supabase...');
try {
  const { createClient } = await import('@supabase/supabase-js');

  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {
    throw new Error('Vari√°veis de ambiente n√£o configuradas');
  }

  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

  // Teste de conex√£o
  const { data, error } = await supabase
    .from('homepage_content')
    .select('count')
    .limit(1);

  if (error) {
    console.log(`   ‚ùå Erro na conex√£o: ${error.message}`);
  } else {
    console.log('   ‚úÖ Conex√£o an√¥nima funcionando');
  }

  // Teste de conex√£o administrativa
  if (process.env.SUPABASE_SERVICE_KEY) {
    const supabaseAdmin = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('homepage_content')
      .select('count')
      .limit(1);

    if (adminError) {
      console.log(`   ‚ùå Erro na conex√£o administrativa: ${adminError.message}`);
    } else {
      console.log('   ‚úÖ Conex√£o administrativa funcionando');
    }
  } else {
    console.log('   ‚ö†Ô∏è Service key n√£o configurada');
  }

} catch (error) {
  console.log(`   ‚ùå Erro: ${error.message}`);
}

// 6. Resumo
console.log('\nüéØ Resumo da Configura√ß√£o:');
const hasUrl = !!process.env.SUPABASE_URL;
const hasAnonKey = !!process.env.SUPABASE_ANON_KEY;
const hasServiceKey = !!process.env.SUPABASE_SERVICE_KEY;

if (hasUrl && hasAnonKey && hasServiceKey) {
  console.log('   ‚úÖ Configura√ß√£o completa - Sistema pronto!');
} else if (hasUrl && hasAnonKey) {
  console.log('   ‚ö†Ô∏è Configura√ß√£o parcial - Falta service key');
} else {
  console.log('   ‚ùå Configura√ß√£o incompleta - Verifique o arquivo');
}

console.log('\nüöÄ Pr√≥ximos passos:');
if (hasUrl && hasAnonKey && hasServiceKey) {
  console.log('   1. Reiniciar o servidor');
  console.log('   2. Testar cria√ß√£o de card na interface');
  console.log('   3. Verificar se n√£o h√° mais erro de RLS');
} else {
  console.log('   1. Verificar arquivo config-supabase.env');
  console.log('   2. Configurar service key do Supabase');
  console.log('   3. Executar este teste novamente');
}
