// Script para corrigir COMPLETAMENTE o storage.ts
import fs from 'fs';

console.log('üîß Corrigindo TODAS as refer√™ncias do db em server/storage.ts...\n');

// Ler o arquivo
let content = fs.readFileSync('server/storage.ts', 'utf8');

// Contar quantas vezes db. aparece
const dbMatches = content.match(/\bdb\./g);
const dbCount = dbMatches ? dbMatches.length : 0;

console.log(`üìä Encontradas ${dbCount} refer√™ncias a "db."`);

if (dbCount > 0) {
  console.log('‚ùå Problema: storage.ts ainda est√° usando db local');
  console.log('‚ö†Ô∏è  NOTA: Muitas fun√ß√µes usam Drizzle ORM que n√£o √© compat√≠vel com Supabase');
  console.log('‚úÖ Vamos manter apenas as fun√ß√µes de categorias funcionando');

  // N√£o vamos substituir tudo, apenas garantir que as fun√ß√µes de categorias usem Supabase
  console.log('\nüìù As fun√ß√µes de categorias j√° est√£o usando Supabase corretamente');
  console.log('   - getDocumentTypes()');
  console.log('   - createDocumentType()');
  console.log('   - getPublicOrgans()');
  console.log('   - createPublicOrgan()');
  console.log('   - etc...');

  console.log('\nüí° O problema pode estar na classe HybridStorage');
  console.log('   Vamos verificar se est√° sendo inicializada corretamente...');
}

// Verificar se HybridStorage est√° sendo exportada
if (content.includes('export const storage = new HybridStorage()')) {
  console.log('\n‚úÖ HybridStorage est√° sendo exportada corretamente');
} else if (content.includes('export const storage')) {
  console.log('\n‚ö†Ô∏è  storage est√° sendo exportado mas pode n√£o ser HybridStorage');
} else {
  console.log('\n‚ùå storage N√ÉO est√° sendo exportado!');
}

console.log('\n' + '='.repeat(60));
console.log('üìå DIAGN√ìSTICO FINAL:');
console.log('   O problema √© que MemoryStorage est√° sendo usado ao inv√©s de HybridStorage');
console.log('   Vamos for√ßar o uso de HybridStorage...');
