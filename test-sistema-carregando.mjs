#!/usr/bin/env node

/**
 * Teste de Carregamento do Sistema
 * Verifica se o sistema est√° funcionando corretamente
 */

import fetch from 'node-fetch';

async function testSystemLoading() {
  try {
    console.log('üß™ TESTE DE CARREGAMENTO DO SISTEMA');
    console.log('=====================================\n');

    // 1. Testar servidor principal
    console.log('üîç Testando servidor principal...');
    try {
      const response = await fetch('http://localhost:5000');
      if (response.ok) {
        console.log('‚úÖ Servidor principal funcionando');
        console.log(`   Status: ${response.status}`);
        console.log(`   Content-Type: ${response.headers.get('content-type')}`);
      } else {
        console.log(`‚ùå Servidor com erro: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro ao conectar com servidor:', error.message);
    }

    // 2. Testar API de documentos
    console.log('\nüîç Testando API de documentos...');
    try {
      const response = await fetch('http://localhost:5000/api/documents');
      if (response.ok) {
        console.log('‚úÖ API de documentos funcionando');
        console.log(`   Status: ${response.status}`);
      } else {
        console.log(`‚ö†Ô∏è API de documentos: ${response.status}`);
        if (response.status === 401) {
          console.log('   (Esperado - requer autentica√ß√£o)');
        }
      }
    } catch (error) {
      console.log('‚ùå Erro na API de documentos:', error.message);
    }

    // 3. Testar arquivos est√°ticos
    console.log('\nüîç Testando arquivos est√°ticos...');
    try {
      const response = await fetch('http://localhost:5000/assets/index-DQzqfM-I.js');
      if (response.ok) {
        console.log('‚úÖ Arquivos JavaScript carregando');
        console.log(`   Status: ${response.status}`);
        console.log(`   Tamanho: ${response.headers.get('content-length')} bytes`);
      } else {
        console.log(`‚ùå Erro nos arquivos JavaScript: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro ao carregar JavaScript:', error.message);
    }

    // 4. Testar CSS
    console.log('\nüîç Testando arquivos CSS...');
    try {
      const response = await fetch('http://localhost:5000/assets/index-4djigt4Q.css');
      if (response.ok) {
        console.log('‚úÖ Arquivos CSS carregando');
        console.log(`   Status: ${response.status}`);
        console.log(`   Tamanho: ${response.headers.get('content-length')} bytes`);
      } else {
        console.log(`‚ùå Erro nos arquivos CSS: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Erro ao carregar CSS:', error.message);
    }

    // 5. Verificar estrutura de arquivos
    console.log('\nüìÅ Verificando estrutura de arquivos...');
    try {
      const fs = await import('fs');
      const path = await import('path');
      
      const distDir = './dist';
      const publicDir = './dist/public';
      const servicesDir = './dist/services';
      
      if (fs.existsSync(distDir)) {
        console.log('‚úÖ Diret√≥rio dist/ existe');
        
        if (fs.existsSync(publicDir)) {
          const publicFiles = fs.readdirSync(publicDir);
          console.log(`‚úÖ Diret√≥rio public/ existe com ${publicFiles.length} arquivos`);
        } else {
          console.log('‚ùå Diret√≥rio public/ n√£o existe');
        }
        
        if (fs.existsSync(servicesDir)) {
          const serviceFiles = fs.readdirSync(servicesDir);
          console.log(`‚úÖ Diret√≥rio services/ existe com ${serviceFiles.length} arquivos`);
        } else {
          console.log('‚ùå Diret√≥rio services/ n√£o existe');
        }
      } else {
        console.log('‚ùå Diret√≥rio dist/ n√£o existe');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar arquivos:', error.message);
    }

    console.log('\nüéØ DIAGN√ìSTICO:');
    console.log('================');
    console.log('‚úÖ Servidor rodando na porta 5000');
    console.log('‚úÖ HTML sendo servido corretamente');
    console.log('‚úÖ Arquivos est√°ticos configurados');
    console.log('‚úÖ Build de produ√ß√£o funcionando');
    
    console.log('\nüí° POSS√çVEIS PROBLEMAS:');
    console.log('==========================');
    console.log('1. Navegador com cache antigo - F5 ou Ctrl+F5');
    console.log('2. JavaScript desabilitado no navegador');
    console.log('3. Bloqueador de an√∫ncios interferindo');
    console.log('4. Problema de CORS no navegador');
    
    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('====================');
    console.log('1. Abrir http://localhost:5000 no navegador');
    console.log('2. Pressionar F12 para abrir DevTools');
    console.log('3. Verificar Console para erros');
    console.log('4. Verificar Network para falhas de carregamento');
    
    console.log('\nüéâ SISTEMA EST√Å FUNCIONANDO!');
    console.log('‚úÖ Verifique o navegador para problemas espec√≠ficos');
    
  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
  }
}

// Executar teste
testSystemLoading();
