// Script para verificar e popular categorias no Supabase
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fbqocpozjmuzrdeacktb.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZicW9jcG96am11enJkZWFja3RiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4NTY3ODYsImV4cCI6MjA2NTQzMjc4Nn0.nZPmcY4QtgnZ0K68TW2VlrQm4gyqodQUxgrWDechhhY';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç Verificando e populando categorias no Supabase...\n');

// Primeiro, vamos verificar se as tabelas existem e t√™m dados
async function verificarEPopular() {
  try {
    // Verificar tipos de documento
    console.log('üìÑ Verificando tipos de documento...');
    const { data: tipos, error: tiposError } = await supabase
      .from('document_types')
      .select('*');

    if (tiposError) {
      console.log('‚ùå Erro ao buscar tipos:', tiposError.message);
    } else {
      console.log(`   Encontrados: ${tipos?.length || 0} tipos`);

      // Se vazio, popular
      if (!tipos || tipos.length === 0) {
        console.log('   üìù Populando tipos de documento...');
        const tiposParaInserir = [
          'Of√≠cio', 'Memorando', 'Relat√≥rio', 'Ata', 'Decreto',
          'Lei', 'Portaria', 'Resolu√ß√£o', 'Circular', 'Edital',
          'Contrato', 'Conv√™nio', 'Parecer', 'Nota T√©cnica', 'Carta'
        ];

        for (const name of tiposParaInserir) {
          const { error } = await supabase
            .from('document_types')
            .insert([{ name }]);

          if (error) {
            console.log(`      ‚ö†Ô∏è Erro ao inserir ${name}: ${error.message}`);
          } else {
            console.log(`      ‚úÖ ${name} inserido`);
          }
        }
      }
    }

    // Verificar √≥rg√£os p√∫blicos
    console.log('\nüèõÔ∏è Verificando √≥rg√£os p√∫blicos...');
    const { data: orgaos, error: orgaosError } = await supabase
      .from('public_organs')
      .select('*');

    if (orgaosError) {
      console.log('‚ùå Erro ao buscar √≥rg√£os:', orgaosError.message);
    } else {
      console.log(`   Encontrados: ${orgaos?.length || 0} √≥rg√£os`);

      if (!orgaos || orgaos.length === 0) {
        console.log('   üèõÔ∏è Populando √≥rg√£os p√∫blicos...');
        const orgaosParaInserir = [
          'Presid√™ncia da Rep√∫blica', 'Minist√©rio da Fazenda',
          'Minist√©rio da Justi√ßa', 'C√¢mara dos Deputados',
          'Senado Federal', 'Minist√©rio da Sa√∫de',
          'Minist√©rio da Educa√ß√£o', 'Tribunal de Contas da Uni√£o',
          'Minist√©rio do Meio Ambiente', 'Controladoria-Geral da Uni√£o'
        ];

        for (const name of orgaosParaInserir) {
          const { error } = await supabase
            .from('public_organs')
            .insert([{ name }]);

          if (error) {
            console.log(`      ‚ö†Ô∏è Erro ao inserir ${name}: ${error.message}`);
          } else {
            console.log(`      ‚úÖ ${name} inserido`);
          }
        }
      }
    }

    // Verificar setores respons√°veis
    console.log('\nüìã Verificando setores respons√°veis...');
    const { data: setores, error: setoresError } = await supabase
      .from('responsible_sectors')
      .select('*');

    if (setoresError) {
      console.log('‚ùå Erro ao buscar setores:', setoresError.message);
    } else {
      console.log(`   Encontrados: ${setores?.length || 0} setores`);

      if (!setores || setores.length === 0) {
        console.log('   üìã Populando setores respons√°veis...');
        const setoresParaInserir = [
          'Departamento Jur√≠dico', 'Secretaria Executiva',
          'Assessoria de Comunica√ß√£o', 'Gabinete',
          'Diretoria Administrativa', 'Departamento de Recursos Humanos',
          'Departamento Financeiro', 'Departamento de TI',
          'Ouvidoria', 'Controladoria Interna'
        ];

        for (const name of setoresParaInserir) {
          const { error } = await supabase
            .from('responsible_sectors')
            .insert([{ name }]);

          if (error) {
            console.log(`      ‚ö†Ô∏è Erro ao inserir ${name}: ${error.message}`);
          } else {
            console.log(`      ‚úÖ ${name} inserido`);
          }
        }
      }
    }

    // Verificar assuntos principais
    console.log('\nüìö Verificando assuntos principais...');
    const { data: assuntos, error: assuntosError } = await supabase
      .from('main_subjects')
      .select('*');

    if (assuntosError) {
      console.log('‚ùå Erro ao buscar assuntos:', assuntosError.message);
    } else {
      console.log(`   Encontrados: ${assuntos?.length || 0} assuntos`);

      if (!assuntos || assuntos.length === 0) {
        console.log('   üìö Populando assuntos principais...');
        const assuntosParaInserir = [
          'Administra√ß√£o P√∫blica', 'Or√ßamento e Finan√ßas',
          'Recursos Humanos', 'Tecnologia da Informa√ß√£o',
          'Meio Ambiente', 'Sa√∫de', 'Educa√ß√£o',
          'Seguran√ßa P√∫blica', 'Infraestrutura', 'Cultura e Esporte'
        ];

        for (const name of assuntosParaInserir) {
          const { error } = await supabase
            .from('main_subjects')
            .insert([{ name }]);

          if (error) {
            console.log(`      ‚ö†Ô∏è Erro ao inserir ${name}: ${error.message}`);
          } else {
            console.log(`      ‚úÖ ${name} inserido`);
          }
        }
      }
    }

    // Verificar e popular outras tabelas...
    const outrasTabelas = [
      {
        nome: 'confidentiality_levels',
        label: 'üîí n√≠veis de confidencialidade',
        dados: ['P√∫blico', 'Restrito', 'Confidencial', 'Secreto', 'Ultra-secreto']
      },
      {
        nome: 'availability_options',
        label: 'üåê op√ß√µes de disponibilidade',
        dados: ['Dispon√≠vel Online', 'Arquivo F√≠sico', 'Biblioteca',
                'Acesso Restrito', 'Em Digitaliza√ß√£o', 'Temporariamente Indispon√≠vel']
      },
      {
        nome: 'language_options',
        label: 'üó£Ô∏è op√ß√µes de idioma',
        dados: ['Portugu√™s', 'Ingl√™s', 'Espanhol', 'Franc√™s',
                'Alem√£o', 'Italiano', 'Chin√™s', 'Japon√™s']
      },
      {
        nome: 'rights_options',
        label: '‚öñÔ∏è op√ß√µes de direitos',
        dados: ['Dom√≠nio P√∫blico', 'Direitos Reservados', 'Creative Commons',
                'Uso Interno', 'Licen√ßa Comercial', 'Uso Educacional']
      },
      {
        nome: 'document_authorities',
        label: 'üëë autoridades de documento',
        dados: ['Presidente', 'Ministro', 'Secret√°rio', 'Diretor',
                'Coordenador', 'Chefe de Gabinete', 'Procurador',
                'Auditor', 'Assessor', 'Gerente']
      }
    ];

    for (const tabela of outrasTabelas) {
      console.log(`\n${tabela.label.split(' ')[0]} Verificando ${tabela.label.substring(2)}...`);
      const { data, error } = await supabase
        .from(tabela.nome)
        .select('*');

      if (error) {
        console.log(`‚ùå Erro ao buscar ${tabela.label.substring(2)}:`, error.message);
      } else {
        console.log(`   Encontrados: ${data?.length || 0} registros`);

        if (!data || data.length === 0) {
          console.log(`   Populando ${tabela.label.substring(2)}...`);

          for (const name of tabela.dados) {
            const { error: insertError } = await supabase
              .from(tabela.nome)
              .insert([{ name }]);

            if (insertError) {
              console.log(`      ‚ö†Ô∏è Erro ao inserir ${name}: ${insertError.message}`);
            } else {
              console.log(`      ‚úÖ ${name} inserido`);
            }
          }
        }
      }
    }

    console.log('\nüéâ Verifica√ß√£o e popula√ß√£o conclu√≠da!');

    // Testar a API novamente
    console.log('\nüîç Testando APIs...');

    const { data: tiposFinal } = await supabase
      .from('document_types')
      .select('*')
      .order('name');

    const { data: assuntosFinal } = await supabase
      .from('main_subjects')
      .select('*')
      .order('name');

    console.log(`\n‚úÖ Total de tipos de documento: ${tiposFinal?.length || 0}`);
    console.log(`‚úÖ Total de assuntos principais: ${assuntosFinal?.length || 0}`);

    if (tiposFinal && tiposFinal.length > 0) {
      console.log('\nüìÑ Primeiros 3 tipos de documento:');
      tiposFinal.slice(0, 3).forEach(t => console.log(`   - ${t.name}`));
    }

    if (assuntosFinal && assuntosFinal.length > 0) {
      console.log('\nüìö Primeiros 3 assuntos principais:');
      assuntosFinal.slice(0, 3).forEach(a => console.log(`   - ${a.name}`));
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar
verificarEPopular();
