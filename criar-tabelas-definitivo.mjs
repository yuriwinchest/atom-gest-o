// Script definitivo para criar e popular tabelas no Supabase
import { createClient } from '@supabase/supabase-js';

// CREDENCIAIS CORRETAS DO SEU PROJETO
const supabaseUrl = 'https://xwrnhpqzbhwiqasuywjo.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh3cm5ocHF6Ymh3aXFhc3V5d2pvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEwMTIxMTYsImV4cCI6MjA2NjU4ODExNn0.6-jfb70OUjegikt8zBWmZGzcb6QZ-4jJiEXaxsVWez4';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üöÄ CRIANDO E POPULANDO TABELAS NO SUPABASE\n');
console.log('URL:', supabaseUrl);
console.log('='.repeat(60));

// SQL para criar todas as tabelas
const sqlCreateTables = `
-- Criar tabelas de categorias
CREATE TABLE IF NOT EXISTS document_types (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public_organs (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS responsible_sectors (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS main_subjects (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS confidentiality_levels (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS availability_options (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS language_options (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS rights_options (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS document_authorities (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
`;

// Dados para popular
const categoriesData = {
  document_types: [
    'Of√≠cio', 'Memorando', 'Relat√≥rio', 'Ata', 'Decreto',
    'Lei', 'Portaria', 'Resolu√ß√£o', 'Circular', 'Edital',
    'Contrato', 'Conv√™nio', 'Parecer', 'Nota T√©cnica', 'Carta'
  ],
  public_organs: [
    'Presid√™ncia da Rep√∫blica', 'Minist√©rio da Fazenda',
    'Minist√©rio da Justi√ßa', 'C√¢mara dos Deputados',
    'Senado Federal', 'Minist√©rio da Sa√∫de',
    'Minist√©rio da Educa√ß√£o', 'Tribunal de Contas da Uni√£o',
    'Minist√©rio do Meio Ambiente', 'Controladoria-Geral da Uni√£o'
  ],
  responsible_sectors: [
    'Departamento Jur√≠dico', 'Secretaria Executiva',
    'Assessoria de Comunica√ß√£o', 'Gabinete',
    'Diretoria Administrativa', 'Departamento de Recursos Humanos',
    'Departamento Financeiro', 'Departamento de TI',
    'Ouvidoria', 'Controladoria Interna'
  ],
  main_subjects: [
    'Administra√ß√£o P√∫blica', 'Or√ßamento e Finan√ßas',
    'Recursos Humanos', 'Tecnologia da Informa√ß√£o',
    'Meio Ambiente', 'Sa√∫de', 'Educa√ß√£o',
    'Seguran√ßa P√∫blica', 'Infraestrutura', 'Cultura e Esporte'
  ],
  confidentiality_levels: [
    'P√∫blico', 'Restrito', 'Confidencial', 'Secreto', 'Ultra-secreto'
  ],
  availability_options: [
    'Dispon√≠vel Online', 'Arquivo F√≠sico', 'Biblioteca',
    'Acesso Restrito', 'Em Digitaliza√ß√£o', 'Temporariamente Indispon√≠vel'
  ],
  language_options: [
    'Portugu√™s', 'Ingl√™s', 'Espanhol', 'Franc√™s',
    'Alem√£o', 'Italiano', 'Chin√™s', 'Japon√™s'
  ],
  rights_options: [
    'Dom√≠nio P√∫blico', 'Direitos Reservados', 'Creative Commons',
    'Uso Interno', 'Licen√ßa Comercial', 'Uso Educacional'
  ],
  document_authorities: [
    'Presidente', 'Ministro', 'Secret√°rio', 'Diretor',
    'Coordenador', 'Chefe de Gabinete', 'Procurador',
    'Auditor', 'Assessor', 'Gerente'
  ]
};

async function criarEPopularTabelas() {
  console.log('\nüìã PASSO 1: Verificando tabelas existentes...\n');

  // Verificar quais tabelas existem
  for (const tableName of Object.keys(categoriesData)) {
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) {
      if (error.message.includes('does not exist')) {
        console.log(`‚ùå ${tableName} - N√ÉO EXISTE (ser√° criada)`);
      } else {
        console.log(`‚ö†Ô∏è  ${tableName} - ${error.message}`);
      }
    } else {
      console.log(`‚úÖ ${tableName} - J√Å EXISTE`);
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìù PASSO 2: Populando tabelas com dados...\n');

  let totalInserido = 0;
  let totalErros = 0;

  // Popular cada tabela
  for (const [tableName, values] of Object.entries(categoriesData)) {
    console.log(`\nüî∏ Populando ${tableName}:`);

    for (const name of values) {
      const { data, error } = await supabase
        .from(tableName)
        .insert({ name })
        .select();

      if (error) {
        if (error.message && error.message.includes('duplicate')) {
          console.log(`   ‚è≠Ô∏è  ${name} (j√° existe)`);
        } else if (error.message && error.message.includes('does not exist')) {
          console.log(`   ‚ùå Tabela ${tableName} n√£o existe!`);
          totalErros++;
          break; // Pular para pr√≥xima tabela
        } else {
          console.log(`   ‚ùå ${name}: ${error.message || 'Erro desconhecido'}`);
          totalErros++;
        }
      } else if (data && data.length > 0) {
        console.log(`   ‚úÖ ${name} inserido!`);
        totalInserido++;
      }
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìä PASSO 3: Verifica√ß√£o final...\n');

  // Verificar contagem final
  for (const tableName of Object.keys(categoriesData)) {
    const { count, error } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (!error) {
      console.log(`‚úÖ ${tableName.padEnd(25)} - ${count} registros`);
    } else {
      console.log(`‚ùå ${tableName.padEnd(25)} - ${error.message}`);
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìà RESUMO:\n');
  console.log(`   Total inserido: ${totalInserido} registros`);
  console.log(`   Total de erros: ${totalErros}`);

  if (totalErros > 0) {
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Algumas tabelas n√£o existem!');
    console.log('\nüìå SOLU√á√ÉO:');
    console.log('1. Copie o conte√∫do do arquivo CRIAR-TABELAS-SUPABASE.sql');
    console.log('2. Acesse: https://supabase.com/dashboard/project/xwrnhpqzbhwiqasuywjo/sql');
    console.log('3. Cole e execute o SQL');
    console.log('4. Execute este script novamente');
  } else if (totalInserido > 0) {
    console.log('\n‚úÖ SUCESSO! Tabelas populadas com dados!');
  }

  // Testar API
  console.log('\n' + '='.repeat(60));
  console.log('üîç TESTANDO API DO SERVIDOR:\n');

  try {
    const response = await fetch('http://localhost:5000/api/document-types');
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ API funcionando! Retornou ${data.length} tipos de documento`);
    } else {
      console.log(`‚ö†Ô∏è  API retornou erro: ${response.status}`);
    }
  } catch (err) {
    console.log('‚ùå Servidor n√£o est√° rodando');
    console.log('   Execute: npm run dev');
  }
}

// Executar
criarEPopularTabelas().catch(console.error);
