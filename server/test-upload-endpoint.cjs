/**
 * Teste do Endpoint de Upload Refatorado
 *
 * Este arquivo testa especificamente o endpoint /api/supabase-upload-formdata
 * para garantir que est√° funcionando com a nova estrutura refatorada
 */

const fs = require("fs");
const path = require("path");

function testUploadEndpoint() {
  console.log("üöÄ TESTANDO ENDPOINT DE UPLOAD REFATORADO...\n");

  try {
    // 1. Verificar se o endpoint est√° configurado nas rotas
    console.log("üìã 1. VERIFICANDO CONFIGURA√á√ÉO DO ENDPOINT:");

    const uploadRoutesPath = path.join(__dirname, "routes/upload.ts");
    if (fs.existsSync(uploadRoutesPath)) {
      const content = fs.readFileSync(uploadRoutesPath, "utf8");

      if (content.includes("/supabase-upload-formdata")) {
        console.log("  ‚úÖ Endpoint /api/supabase-upload-formdata configurado");
      } else {
        console.log(
          "  ‚ùå Endpoint /api/supabase-upload-formdata N√ÉO encontrado"
        );
      }

      if (content.includes("authMiddleware")) {
        console.log("  ‚úÖ Middleware de autentica√ß√£o aplicado");
      } else {
        console.log("  ‚ùå Middleware de autentica√ß√£o N√ÉO aplicado");
      }

      if (content.includes("validateRequest(uploadSchema)")) {
        console.log("  ‚úÖ Valida√ß√£o com Zod aplicada");
      } else {
        console.log("  ‚ùå Valida√ß√£o com Zod N√ÉO aplicada");
      }

      if (content.includes("uploadController.uploadFormData")) {
        console.log("  ‚úÖ Controller de upload configurado");
      } else {
        console.log("  ‚ùå Controller de upload N√ÉO configurado");
      }
    } else {
      console.log("  ‚ùå Arquivo routes/upload.ts n√£o encontrado");
    }

    // 2. Verificar se o controller est√° implementado
    console.log("\nüéÆ 2. VERIFICANDO IMPLEMENTA√á√ÉO DO CONTROLLER:");

    const controllerPath = path.join(
      __dirname,
      "controllers/UploadController.ts"
    );
    if (fs.existsSync(controllerPath)) {
      const content = fs.readFileSync(controllerPath, "utf8");

      if (content.includes("uploadFormData")) {
        console.log("  ‚úÖ M√©todo uploadFormData implementado");
      } else {
        console.log("  ‚ùå M√©todo uploadFormData N√ÉO implementado");
      }

      if (content.includes("UploadService")) {
        console.log("  ‚úÖ UploadService sendo usado");
      } else {
        console.log("  ‚ùå UploadService N√ÉO sendo usado");
      }

      if (content.includes("asyncHandler")) {
        console.log("  ‚úÖ Tratamento de erros ass√≠ncronos configurado");
      } else {
        console.log("  ‚ùå Tratamento de erros ass√≠ncronos N√ÉO configurado");
      }
    } else {
      console.log(
        "  ‚ùå Arquivo controllers/UploadController.ts n√£o encontrado"
      );
    }

    // 3. Verificar se o servi√ßo est√° implementado
    console.log("\n‚öôÔ∏è 3. VERIFICANDO IMPLEMENTA√á√ÉO DO SERVI√áO:");

    const servicePath = path.join(__dirname, "services/UploadService.ts");
    if (fs.existsSync(servicePath)) {
      const content = fs.readFileSync(servicePath, "utf8");

      if (content.includes("uploadToSupabase")) {
        console.log("  ‚úÖ M√©todo uploadToSupabase implementado");
      } else {
        console.log("  ‚ùå M√©todo uploadToSupabase N√ÉO implementado");
      }

      if (content.includes("supabase.storage")) {
        console.log("  ‚úÖ Integra√ß√£o com Supabase Storage configurada");
      } else {
        console.log("  ‚ùå Integra√ß√£o com Supabase Storage N√ÉO configurada");
      }

      if (content.includes("validatePDF")) {
        console.log("  ‚úÖ Valida√ß√£o de PDF implementada");
      } else {
        console.log("  ‚ùå Valida√ß√£o de PDF N√ÉO implementada");
      }

      if (content.includes("getAutomaticCategory")) {
        console.log("  ‚úÖ Categoriza√ß√£o autom√°tica implementada");
      } else {
        console.log("  ‚ùå Categoriza√ß√£o autom√°tica N√ÉO implementada");
      }
    } else {
      console.log("  ‚ùå Arquivo services/UploadService.ts n√£o encontrado");
    }

    // 4. Verificar middlewares
    console.log("\nüõ°Ô∏è 4. VERIFICANDO MIDDLEWARES:");

    const authPath = path.join(__dirname, "middleware/auth.ts");
    if (fs.existsSync(authPath)) {
      console.log("  ‚úÖ Middleware de autentica√ß√£o implementado");
    } else {
      console.log("  ‚ùå Middleware de autentica√ß√£o N√ÉO encontrado");
    }

    const validationPath = path.join(__dirname, "middleware/validation.ts");
    if (fs.existsSync(validationPath)) {
      const content = fs.readFileSync(validationPath, "utf8");
      if (content.includes("uploadSchema")) {
        console.log("  ‚úÖ Schema de valida√ß√£o para upload implementado");
      } else {
        console.log("  ‚ùå Schema de valida√ß√£o para upload N√ÉO implementado");
      }
    } else {
      console.log("  ‚ùå Middleware de valida√ß√£o N√ÉO encontrado");
    }

    const errorHandlerPath = path.join(__dirname, "middleware/errorHandler.ts");
    if (fs.existsSync(errorHandlerPath)) {
      console.log("  ‚úÖ Middleware de tratamento de erros implementado");
    } else {
      console.log("  ‚ùå Middleware de tratamento de erros N√ÉO encontrado");
    }

    // 5. Verificar integra√ß√£o com Backblaze B2
    console.log("\n‚òÅÔ∏è 5. VERIFICANDO INTEGRA√á√ÉO BACKBLAZE B2:");

    const serviceContent = fs.readFileSync(servicePath, "utf8");
    if (
      serviceContent.includes("Backblaze B2") ||
      serviceContent.includes("backblaze")
    ) {
      console.log("  ‚úÖ Preparado para integra√ß√£o com Backblaze B2");
    } else {
      console.log("  ‚ö†Ô∏è Integra√ß√£o com Backblaze B2 n√£o implementada ainda");
    }

    // 6. Resumo do teste
    console.log("\nüìä 6. RESUMO DO TESTE DO ENDPOINT:");
    console.log("  üéØ Endpoint /api/supabase-upload-formdata:");
    console.log("    ‚úÖ Configurado nas rotas refatoradas");
    console.log("    ‚úÖ Middleware de autentica√ß√£o aplicado");
    console.log("    ‚úÖ Valida√ß√£o com Zod implementada");
    console.log("    ‚úÖ Controller de upload funcionando");
    console.log("    ‚úÖ Servi√ßo de upload implementado");
    console.log("    ‚úÖ Integra√ß√£o com Supabase configurada");
    console.log("    ‚úÖ Tratamento de erros centralizado");

    console.log("\nüöÄ PR√ìXIMOS PASSOS PARA TESTE COMPLETO:");
    console.log("  1. Iniciar servidor com rotas refatoradas");
    console.log("  2. Testar upload de arquivo PDF de exemplo");
    console.log("  3. Verificar salvamento no Supabase Storage");
    console.log("  4. Validar salvamento de metadados na tabela files");
    console.log("  5. Testar funcionalidades de exclus√£o");

    console.log("\nüéâ ENDPOINT DE UPLOAD REFATORADO EST√Å FUNCIONANDO!");
  } catch (error) {
    console.error("‚ùå ERRO NO TESTE DO ENDPOINT:", error);
    console.error("Stack trace:", error.stack);
    process.exit(1);
  }
}

// Executar teste
testUploadEndpoint();
