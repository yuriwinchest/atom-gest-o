// Seed script para popular as tabelas de tipos din√¢micos
import { db } from "./db";
import { documentTypes, publicOrgans, responsibleSectors, mainSubjects, confidentialityLevels, availabilityOptions, languageOptions, rightsOptions, documentAuthorities } from "@shared/schema";

export async function seedDynamicTypes() {
  console.log("üå± Iniciando seed das tabelas de tipos din√¢micos...");

  try {
    // Document Types
    const documentTypesToInsert = [
      { name: "Ata de Reuni√£o", description: "Registro oficial de reuni√£o" },
      { name: "Certificado", description: "Documento de certifica√ß√£o ou diploma" },
      { name: "Contrato", description: "Documento contratual oficial" },
      { name: "Decreto", description: "Ato administrativo de car√°ter normativo" },
      { name: "Edital", description: "Documento p√∫blico de convoca√ß√£o" },
      { name: "Fatura", description: "Documento de cobran√ßa de servi√ßos" },
      { name: "Lei", description: "Norma jur√≠dica de car√°ter geral" },
      { name: "Memorando", description: "Comunica√ß√£o interna oficial" },
      { name: "Of√≠cio", description: "Comunica√ß√£o oficial externa" },
      { name: "Portaria", description: "Ato administrativo interno" },
      { name: "Relat√≥rio", description: "Documento informativo detalhado" },
      { name: "Resolu√ß√£o", description: "Ato administrativo normativo" }
    ];

    // Public Organs
    const publicOrgansToInsert = [
      { name: "C√¢mara Municipal", description: "Poder Legislativo Municipal" },
      { name: "Prefeitura Municipal", description: "Poder Executivo Municipal" },
      { name: "Secretaria de Administra√ß√£o", description: "√ìrg√£o administrativo municipal" },
      { name: "Secretaria de Educa√ß√£o", description: "√ìrg√£o respons√°vel pela educa√ß√£o" },
      { name: "Secretaria de Sa√∫de", description: "√ìrg√£o respons√°vel pela sa√∫de p√∫blica" },
      { name: "Secretaria de Obras", description: "√ìrg√£o respons√°vel por obras p√∫blicas" },
      { name: "Secretaria de Meio Ambiente", description: "√ìrg√£o ambiental municipal" },
      { name: "Secretaria de Finan√ßas", description: "√ìrg√£o financeiro municipal" },
      { name: "Secretaria de Transporte", description: "√ìrg√£o de transporte p√∫blico" },
      { name: "Procuradoria Jur√≠dica", description: "√ìrg√£o jur√≠dico municipal" },
      { name: "Controladoria Geral", description: "√ìrg√£o de controle interno" },
      { name: "Departamento de Recursos Humanos", description: "Gest√£o de pessoal" }
    ];

    // Responsible Sectors
    const responsibleSectorsToInsert = [
      { name: "Arquivo Central", description: "Setor respons√°vel pelo arquivamento" },
      { name: "Departamento Jur√≠dico", description: "Setor jur√≠dico institucional" },
      { name: "Departamento Financeiro", description: "Setor financeiro e cont√°bil" },
      { name: "Departamento de Comunica√ß√£o", description: "Setor de comunica√ß√£o institucional" },
      { name: "Gabinete do Prefeito", description: "Gabinete executivo principal" },
      { name: "Mesa Diretora", description: "Mesa diretora da C√¢mara" },
      { name: "Setor de Protocolo", description: "Setor de protocolo e recep√ß√£o" },
      { name: "Setor de Licita√ß√µes", description: "Setor respons√°vel por licita√ß√µes" },
      { name: "Setor de Compras", description: "Setor de aquisi√ß√µes p√∫blicas" },
      { name: "Setor de Patrim√¥nio", description: "Gest√£o patrimonial" },
      { name: "Setor de Tecnologia", description: "Tecnologia da informa√ß√£o" },
      { name: "Setor de Planejamento", description: "Planejamento estrat√©gico" }
    ];

    // Main Subjects
    const mainSubjectsToInsert = [
      { name: "Administra√ß√£o P√∫blica", description: "Gest√£o e administra√ß√£o governamental" },
      { name: "Educa√ß√£o", description: "Pol√≠ticas e programas educacionais" },
      { name: "Sa√∫de P√∫blica", description: "Pol√≠ticas e servi√ßos de sa√∫de" },
      { name: "Obras P√∫blicas", description: "Infraestrutura e constru√ß√£o civil" },
      { name: "Meio Ambiente", description: "Pol√≠ticas ambientais e sustentabilidade" },
      { name: "Finan√ßas P√∫blicas", description: "Or√ßamento e gest√£o financeira" },
      { name: "Recursos Humanos", description: "Gest√£o de pessoal e servidores" },
      { name: "Legisla√ß√£o", description: "Normas e regulamenta√ß√µes" },
      { name: "Licita√ß√µes e Contratos", description: "Processos licitat√≥rios e contratos" },
      { name: "Protocolo e Correspond√™ncia", description: "Documenta√ß√£o e comunica√ß√£o oficial" },
      { name: "Patrim√¥nio P√∫blico", description: "Gest√£o de bens p√∫blicos" },
      { name: "Transporte P√∫blico", description: "Sistema de transporte municipal" },
      { name: "Seguran√ßa P√∫blica", description: "Pol√≠ticas de seguran√ßa municipal" },
      { name: "Assist√™ncia Social", description: "Programas sociais e assistenciais" },
      { name: "Cultura e Esportes", description: "Atividades culturais e esportivas" },
      { name: "Desenvolvimento Urbano", description: "Planejamento e desenvolvimento da cidade" }
    ];

    // Inserir dados nas tabelas
    console.log("üìÑ Inserindo tipos de documento...");
    await db.insert(documentTypes).values(documentTypesToInsert).onConflictDoNothing();

    console.log("üèõÔ∏è Inserindo √≥rg√£os p√∫blicos...");
    await db.insert(publicOrgans).values(publicOrgansToInsert).onConflictDoNothing();

    console.log("üìã Inserindo setores respons√°veis...");
    await db.insert(responsibleSectors).values(responsibleSectorsToInsert).onConflictDoNothing();

    console.log("üìö Inserindo assuntos principais...");
    await db.insert(mainSubjects).values(mainSubjectsToInsert).onConflictDoNothing();

    // Additional dynamic types
    const confidentialityLevelsToInsert = [
      { name: "P√∫blico", description: "Acesso livre ao p√∫blico em geral" },
      { name: "Restrito", description: "Acesso restrito a pessoal autorizado" },
      { name: "Confidencial", description: "Acesso limitado a pessoas espec√≠ficas" },
      { name: "Reservado", description: "Informa√ß√£o com grau de prote√ß√£o" },
      { name: "Sigiloso", description: "M√°ximo grau de prote√ß√£o" },
      { name: "Interno", description: "Uso interno da organiza√ß√£o" }
    ];

    const availabilityOptionsToInsert = [
      { name: "P√∫blico", description: "Dispon√≠vel publicamente" },
      { name: "Restrito", description: "Acesso restrito" },
      { name: "Sob Demanda", description: "Dispon√≠vel mediante solicita√ß√£o" },
      { name: "Tempor√°rio", description: "Disponibilidade limitada no tempo" },
      { name: "Permanente", description: "Disponibilidade permanente" }
    ];

    const languageOptionsToInsert = [
      { name: "Portugu√™s", description: "Idioma portugu√™s brasileiro" },
      { name: "Ingl√™s", description: "Idioma ingl√™s" },
      { name: "Espanhol", description: "Idioma espanhol" },
      { name: "Franc√™s", description: "Idioma franc√™s" },
      { name: "Italiano", description: "Idioma italiano" },
      { name: "Alem√£o", description: "Idioma alem√£o" }
    ];

    const rightsOptionsToInsert = [
      { name: "Dom√≠nio P√∫blico", description: "Livre uso e distribui√ß√£o" },
      { name: "Uso Restrito", description: "Uso limitado e controlado" },
      { name: "Direitos Autorais", description: "Protegido por direitos autorais" },
      { name: "Creative Commons", description: "Licen√ßa Creative Commons" },
      { name: "Uso Interno", description: "Apenas para uso interno" },
      { name: "Licen√ßa Espec√≠fica", description: "Sujeito a licen√ßa espec√≠fica" }
    ];

    const documentAuthoritiesToInsert = [
      { name: "Prefeito", description: "Autoridade municipal m√°xima" },
      { name: "Secret√°rio", description: "Secret√°rio municipal" },
      { name: "Diretor", description: "Diretor de departamento" },
      { name: "Coordenador", description: "Coordenador de setor" },
      { name: "Chefe de Gabinete", description: "Chefe do gabinete" },
      { name: "Procurador", description: "Procurador jur√≠dico" },
      { name: "Contador", description: "Contador respons√°vel" },
      { name: "Engenheiro", description: "Engenheiro respons√°vel" },
      { name: "Presidente da C√¢mara", description: "Presidente da C√¢mara Municipal" }
    ];

    console.log("üîí Inserindo n√≠veis de confidencialidade...");
    await db.insert(confidentialityLevels).values(confidentialityLevelsToInsert).onConflictDoNothing();

    console.log("üåê Inserindo op√ß√µes de disponibilidade...");
    await db.insert(availabilityOptions).values(availabilityOptionsToInsert).onConflictDoNothing();

    console.log("üó£Ô∏è Inserindo op√ß√µes de idioma...");
    await db.insert(languageOptions).values(languageOptionsToInsert).onConflictDoNothing();

    console.log("‚öñÔ∏è Inserindo op√ß√µes de direitos...");
    await db.insert(rightsOptions).values(rightsOptionsToInsert).onConflictDoNothing();

    console.log("üëë Inserindo autoridades de documento...");
    await db.insert(documentAuthorities).values(documentAuthoritiesToInsert).onConflictDoNothing();

    console.log("‚úÖ Seed de tipos din√¢micos conclu√≠do com sucesso!");
    
    // Verificar quantos registros foram inseridos
    const documentTypesCount = await db.select().from(documentTypes);
    const publicOrgansCount = await db.select().from(publicOrgans);
    const responsibleSectorsCount = await db.select().from(responsibleSectors);
    const mainSubjectsCount = await db.select().from(mainSubjects);
    const confidentialityLevelsCount = await db.select().from(confidentialityLevels);
    const availabilityOptionsCount = await db.select().from(availabilityOptions);
    const languageOptionsCount = await db.select().from(languageOptions);
    const rightsOptionsCount = await db.select().from(rightsOptions);
    const documentAuthoritiesCount = await db.select().from(documentAuthorities);

    console.log(`üìä Resumo do seed:`);
    console.log(`  - Tipos de documento: ${documentTypesCount.length}`);
    console.log(`  - √ìrg√£os p√∫blicos: ${publicOrgansCount.length}`);
    console.log(`  - Setores respons√°veis: ${responsibleSectorsCount.length}`);
    console.log(`  - Assuntos principais: ${mainSubjectsCount.length}`);
    console.log(`  - N√≠veis de confidencialidade: ${confidentialityLevelsCount.length}`);
    console.log(`  - Op√ß√µes de disponibilidade: ${availabilityOptionsCount.length}`);
    console.log(`  - Op√ß√µes de idioma: ${languageOptionsCount.length}`);
    console.log(`  - Op√ß√µes de direitos: ${rightsOptionsCount.length}`);
    console.log(`  - Autoridades de documento: ${documentAuthoritiesCount.length}`);

  } catch (error) {
    console.error("‚ùå Erro durante o seed:", error);
    throw error;
  }
}

// Execute seed if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedDynamicTypes()
    .then(() => {
      console.log("üéâ Seed executado com sucesso!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• Erro no seed:", error);
      process.exit(1);
    });
}