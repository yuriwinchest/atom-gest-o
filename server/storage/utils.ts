// Fun√ß√£o para extrair texto automaticamente baseado no tipo de arquivo
export async function extractTextFromDocument(content: string, fileName?: string): Promise<string> {
  try {
    let documentDetails;
    try {
      documentDetails = JSON.parse(content);
    } catch (e) {
      return ''; // Se n√£o for JSON v√°lido, retorna vazio
    }

    const fileType = documentDetails?.fileType?.toLowerCase() || '';
    const fileInfo = documentDetails?.fileInfo;
    const description = documentDetails?.description || '';
    const title = documentDetails?.title || fileName || '';

    // Come√ßar com texto dos metadados sempre
    let extractedText = `T√≠tulo: ${title}. `;
    if (description) {
      extractedText += `Descri√ß√£o: ${description}. `;
    }

    // Adicionar contexto baseado no tipo de arquivo
    if (fileType.includes('pdf')) {
      extractedText += 'Documento PDF. Conte√∫do: relat√≥rio, formul√°rio, texto oficial, dados t√©cnicos, informa√ß√µes documentais. ';
    } else if (fileType.includes('word') || fileType.includes('document')) {
      extractedText += 'Documento Word. Conte√∫do: texto formatado, relat√≥rio oficial, documento administrativo, correspond√™ncia. ';
    } else if (fileType.includes('excel') || fileType.includes('spreadsheet') || fileType.includes('csv')) {
      extractedText += 'Planilha Excel/CSV. Conte√∫do: dados tabulares, n√∫meros, c√°lculos, tabelas, relat√≥rios financeiros, estat√≠sticas. ';
    } else if (fileType.includes('powerpoint') || fileType.includes('presentation')) {
      extractedText += 'Apresenta√ß√£o PowerPoint. Conte√∫do: slides, gr√°ficos, apresenta√ß√£o visual, treinamento. ';
    } else if (fileType.includes('image')) {
      extractedText += 'Arquivo de imagem. Conte√∫do: foto, gr√°fico, diagrama, ilustra√ß√£o, documento digitalizado. ';
    } else if (fileType.includes('video')) {
      extractedText += 'Arquivo de v√≠deo. Conte√∫do: grava√ß√£o, apresenta√ß√£o visual, treinamento em v√≠deo. ';
    } else if (fileType.includes('audio')) {
      extractedText += 'Arquivo de √°udio. Conte√∫do: grava√ß√£o sonora, entrevista, ata de reuni√£o gravada. ';
    } else if (fileType.includes('text')) {
      extractedText += 'Arquivo de texto. Conte√∫do: texto simples, documenta√ß√£o, notas, dados n√£o formatados. ';
    }

    // Adicionar informa√ß√µes dos metadados do formul√°rio
    const metadataFields = [
      'documentType', 'publicOrgan', 'responsibleSector', 'responsible',
      'mainSubject', 'confidentialityLevel', 'legalBase', 'relatedProcess',
      'availability', 'language', 'rights', 'period', 'digitalizationLocation',
      'documentAuthority'
    ];

    for (const field of metadataFields) {
      const value = documentDetails[field];
      if (value && typeof value === 'string' && value.trim() !== '') {
        extractedText += `${value} `;
      }
    }

    // Adicionar tags se existirem
    if (documentDetails.tags && Array.isArray(documentDetails.tags)) {
      extractedText += documentDetails.tags.join(' ') + ' ';
    }

    console.log(`üîç Texto extra√≠do automaticamente (${extractedText.length} chars): ${extractedText.substring(0, 200)}...`);
    return extractedText.trim();

  } catch (error) {
    console.error('Erro na extra√ß√£o autom√°tica de texto:', error);
    return '';
  }
}

// Fun√ß√£o para mapear registros do Supabase para o schema Document
export function mapFileToDocument(file: any): any {
  return {
    id: file.id,
    title: file.name,
    description: file.description || null,
    content: file.metadata?.content || null,
    tags: file.tags || null,
    category: file.metadata?.category || null,
    author: file.metadata?.author || null,
    user_id: file.user_id ? parseInt(file.user_id) : null,
    createdAt: new Date(file.created_at)
  };
}
