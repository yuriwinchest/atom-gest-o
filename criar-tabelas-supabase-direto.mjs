// Script para criar e popular tabelas diretamente no Supabase
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fbqocpozjmuzrdeacktb.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZicW9jcG96am11enJkZWFja3RiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTg1Njc4NiwiZXhwIjoyMDY1NDMyNzg2fQ.V37kx1A0n8LzOBGWOzDFSopUBQkQ4TgNMBl8vWMpKqY';

// Usar service key para ter permiss√µes totais
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

console.log('üöÄ Criando tabelas de categorias no Supabase...\n');

// Fun√ß√£o para executar SQL diretamente
async function executarSQL(sql, descricao) {
  try {
    console.log(`üìù ${descricao}...`);

    // O Supabase n√£o tem m√©todo direto para executar SQL arbitr√°rio via JS
    // Vamos usar uma abordagem diferente - criar via inser√ß√£o
    return true;
  } catch (error) {
    console.error(`‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Vamos criar as tabelas inserindo dados diretamente
async function criarEPopularTabelas() {
  try {
    // 1. Document Types
    console.log('üìÑ Criando e populando tipos de documento...');
    const tiposDocumento = [
      'Of√≠cio', 'Memorando', 'Relat√≥rio', 'Ata', 'Decreto',
      'Lei', 'Portaria', 'Resolu√ß√£o', 'Circular', 'Edital',
      'Contrato', 'Conv√™nio', 'Parecer', 'Nota T√©cnica', 'Carta'
    ];

    for (const tipo of tiposDocumento) {
      const { data, error } = await supabase
        .from('document_types')
        .upsert({ name: tipo }, { onConflict: 'name' })
        .select();

      if (error) {
        // Se a tabela n√£o existe, vamos usar RPC para criar
        console.log(`   ‚ö†Ô∏è Tabela n√£o existe, tentando criar via RPC...`);

        // Tentar criar a tabela via RPC
        const { error: rpcError } = await supabase.rpc('exec_sql', {
          query: `
            CREATE TABLE IF NOT EXISTS document_types (
              id SERIAL PRIMARY KEY,
              name TEXT NOT NULL UNIQUE,
              category TEXT,
              created_at TIMESTAMP DEFAULT NOW()
            );
          `
        }).catch(() => ({ error: 'RPC n√£o dispon√≠vel' }));

        if (rpcError) {
          console.log(`   ‚ÑπÔ∏è RPC n√£o dispon√≠vel. Tabela precisa ser criada manualmente.`);
          break;
        }

        // Tentar inserir novamente
        const { error: insertError } = await supabase
          .from('document_types')
          .insert({ name: tipo });

        if (insertError) {
          console.log(`   ‚ùå ${tipo}: ${insertError.message}`);
        } else {
          console.log(`   ‚úÖ ${tipo} inserido`);
        }
      } else {
        console.log(`   ‚úÖ ${tipo}`);
      }
    }

    // 2. Public Organs
    console.log('\nüèõÔ∏è Criando e populando √≥rg√£os p√∫blicos...');
    const orgaosPublicos = [
      'Presid√™ncia da Rep√∫blica', 'Minist√©rio da Fazenda',
      'Minist√©rio da Justi√ßa', 'C√¢mara dos Deputados',
      'Senado Federal', 'Minist√©rio da Sa√∫de',
      'Minist√©rio da Educa√ß√£o', 'Tribunal de Contas da Uni√£o',
      'Minist√©rio do Meio Ambiente', 'Controladoria-Geral da Uni√£o'
    ];

    for (const orgao of orgaosPublicos) {
      const { error } = await supabase
        .from('public_organs')
        .upsert({ name: orgao }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${orgao}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${orgao}`);
      }
    }

    // 3. Responsible Sectors
    console.log('\nüìã Criando e populando setores respons√°veis...');
    const setoresResponsaveis = [
      'Departamento Jur√≠dico', 'Secretaria Executiva',
      'Assessoria de Comunica√ß√£o', 'Gabinete',
      'Diretoria Administrativa', 'Departamento de Recursos Humanos',
      'Departamento Financeiro', 'Departamento de TI',
      'Ouvidoria', 'Controladoria Interna'
    ];

    for (const setor of setoresResponsaveis) {
      const { error } = await supabase
        .from('responsible_sectors')
        .upsert({ name: setor }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${setor}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${setor}`);
      }
    }

    // 4. Main Subjects
    console.log('\nüìö Criando e populando assuntos principais...');
    const assuntosPrincipais = [
      'Administra√ß√£o P√∫blica', 'Or√ßamento e Finan√ßas',
      'Recursos Humanos', 'Tecnologia da Informa√ß√£o',
      'Meio Ambiente', 'Sa√∫de', 'Educa√ß√£o',
      'Seguran√ßa P√∫blica', 'Infraestrutura', 'Cultura e Esporte'
    ];

    for (const assunto of assuntosPrincipais) {
      const { error } = await supabase
        .from('main_subjects')
        .upsert({ name: assunto }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${assunto}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${assunto}`);
      }
    }

    // 5. Confidentiality Levels
    console.log('\nüîí Criando e populando n√≠veis de confidencialidade...');
    const niveisConfidencialidade = [
      'P√∫blico', 'Restrito', 'Confidencial', 'Secreto', 'Ultra-secreto'
    ];

    for (const nivel of niveisConfidencialidade) {
      const { error } = await supabase
        .from('confidentiality_levels')
        .upsert({ name: nivel }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${nivel}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${nivel}`);
      }
    }

    // 6. Availability Options
    console.log('\nüåê Criando e populando op√ß√µes de disponibilidade...');
    const opcoesDisponibilidade = [
      'Dispon√≠vel Online', 'Arquivo F√≠sico', 'Biblioteca',
      'Acesso Restrito', 'Em Digitaliza√ß√£o', 'Temporariamente Indispon√≠vel'
    ];

    for (const opcao of opcoesDisponibilidade) {
      const { error } = await supabase
        .from('availability_options')
        .upsert({ name: opcao }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${opcao}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${opcao}`);
      }
    }

    // 7. Language Options
    console.log('\nüó£Ô∏è Criando e populando op√ß√µes de idioma...');
    const opcoesIdioma = [
      'Portugu√™s', 'Ingl√™s', 'Espanhol', 'Franc√™s',
      'Alem√£o', 'Italiano', 'Chin√™s', 'Japon√™s'
    ];

    for (const idioma of opcoesIdioma) {
      const { error } = await supabase
        .from('language_options')
        .upsert({ name: idioma }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${idioma}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${idioma}`);
      }
    }

    // 8. Rights Options
    console.log('\n‚öñÔ∏è Criando e populando op√ß√µes de direitos...');
    const opcoesDireitos = [
      'Dom√≠nio P√∫blico', 'Direitos Reservados', 'Creative Commons',
      'Uso Interno', 'Licen√ßa Comercial', 'Uso Educacional'
    ];

    for (const direito of opcoesDireitos) {
      const { error } = await supabase
        .from('rights_options')
        .upsert({ name: direito }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${direito}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${direito}`);
      }
    }

    // 9. Document Authorities
    console.log('\nüëë Criando e populando autoridades de documento...');
    const autoridadesDocumento = [
      'Presidente', 'Ministro', 'Secret√°rio', 'Diretor',
      'Coordenador', 'Chefe de Gabinete', 'Procurador',
      'Auditor', 'Assessor', 'Gerente'
    ];

    for (const autoridade of autoridadesDocumento) {
      const { error } = await supabase
        .from('document_authorities')
        .upsert({ name: autoridade }, { onConflict: 'name' });

      if (error && !error.message.includes('already exists')) {
        console.log(`   ‚ö†Ô∏è ${autoridade}: Tabela n√£o existe`);
        break;
      } else {
        console.log(`   ‚úÖ ${autoridade}`);
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('‚ö†Ô∏è  IMPORTANTE: As tabelas n√£o existem no Supabase!');
    console.log('='.repeat(60));
    console.log('\nüìù Voc√™ precisa criar as tabelas manualmente no Supabase SQL Editor.');
    console.log('   Use o SQL fornecido no arquivo IMPORTANTE-CONFIGURAR-SUPABASE.md');
    console.log('\n1. Acesse: https://supabase.com/dashboard/project/fbqocpozjmuzrdeacktb/sql');
    console.log('2. Cole o SQL do arquivo');
    console.log('3. Execute o SQL');
    console.log('4. Depois rode este script novamente');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar
criarEPopularTabelas();
