/**
 * Script de Teste para Corre√ß√µes - gestao-documentos
 * Testa upload, exclus√£o e estat√≠sticas ap√≥s as corre√ß√µes
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando testes das corre√ß√µes...\n');

// 1. Teste das configura√ß√µes do Supabase
console.log('1Ô∏è‚É£  Testando configura√ß√µes do Supabase...');

try {
  const configPath = path.join(__dirname, 'server', 'supabase.ts');
  const supabaseContent = fs.readFileSync(configPath, 'utf8');

  if (supabaseContent.includes('supabaseAdmin')) {
    console.log('‚úÖ Cliente administrativo do Supabase configurado');
  } else {
    console.log('‚ùå Cliente administrativo do Supabase n√£o encontrado');
  }

  if (supabaseContent.includes('SUPABASE_SERVICE_KEY')) {
    console.log('‚úÖ Service Key configurado');
  } else {
    console.log('‚ö†Ô∏è  Service Key pode n√£o estar configurado');
  }
} catch (error) {
  console.error('‚ùå Erro ao verificar configura√ß√µes do Supabase:', error.message);
}

// 2. Teste das corre√ß√µes no upload
console.log('\n2Ô∏è‚É£  Testando corre√ß√µes de upload...');

try {
  const routesPath = path.join(__dirname, 'server', 'routes.ts');
  const routesContent = fs.readFileSync(routesPath, 'utf8');

  const checks = [
    { pattern: 'supabaseAdmin.*from.*files.*insert', description: 'Upload usando cliente administrativo' },
    { pattern: 'Cliente administrativo.*n√£o configurado', description: 'Tratamento de erro para cliente administrativo' },
    { pattern: 'Erro ao salvar metadados', description: 'Mensagem de erro espec√≠fica para RLS' }
  ];

  checks.forEach(({ pattern, description }) => {
    if (new RegExp(pattern, 'i').test(routesContent)) {
      console.log(`‚úÖ ${description}`);
    } else {
      console.log(`‚ùå ${description} - N√ÉO ENCONTRADO`);
    }
  });
} catch (error) {
  console.error('‚ùå Erro ao verificar corre√ß√µes de upload:', error.message);
}

// 3. Teste das corre√ß√µes de exclus√£o
console.log('\n3Ô∏è‚É£  Testando corre√ß√µes de exclus√£o...');

try {
  const hybridStoragePath = path.join(__dirname, 'server', 'storage', 'HybridStorage.ts');
  const hybridContent = fs.readFileSync(hybridStoragePath, 'utf8');

  const deleteChecks = [
    { pattern: 'supabaseAdmin.*from.*files.*delete', description: 'Exclus√£o usando cliente administrativo' },
    { pattern: 'DELETE PERMANENTE', description: 'Confirma√ß√£o de exclus√£o permanente' },
    { pattern: 'Cliente administrativo n√£o dispon√≠vel', description: 'Tratamento de erro para exclus√£o' }
  ];

  deleteChecks.forEach(({ pattern, description }) => {
    if (new RegExp(pattern, 'i').test(hybridContent)) {
      console.log(`‚úÖ ${description}`);
    } else {
      console.log(`‚ùå ${description} - N√ÉO ENCONTRADO`);
    }
  });
} catch (error) {
  console.error('‚ùå Erro ao verificar corre√ß√µes de exclus√£o:', error.message);
}

// 4. Teste das corre√ß√µes de estat√≠sticas
console.log('\n4Ô∏è‚É£  Testando corre√ß√µes de estat√≠sticas...');

try {
  const statsChecks = [
    { pattern: 'GET.*api.*stats.*chamado', description: 'Log de chamada do endpoint de estat√≠sticas' },
    { pattern: 'JSON.stringify.*realStats', description: 'Valida√ß√£o de JSON antes do envio' },
    { pattern: 'Dados s√£o JSON v√°lidos', description: 'Confirma√ß√£o de dados JSON v√°lidos' }
  ];

  statsChecks.forEach(({ pattern, description }) => {
    if (new RegExp(pattern, 'i').test(routesContent)) {
      console.log(`‚úÖ ${description}`);
    } else {
      console.log(`‚ùå ${description} - N√ÉO ENCONTRADO`);
    }
  });
} catch (error) {
  console.error('‚ùå Erro ao verificar corre√ß√µes de estat√≠sticas:', error.message);
}

// 5. Verificar se as configura√ß√µes de RLS foram aplicadas
console.log('\n5Ô∏è‚É£  Verificando configura√ß√µes de RLS...');

try {
  const rlsPath = path.join(__dirname, 'configurar-rls-supabase.sql');
  if (fs.existsSync(rlsPath)) {
    console.log('‚úÖ Arquivo de configura√ß√£o RLS encontrado');
    const rlsContent = fs.readFileSync(rlsPath, 'utf8');
    if (rlsContent.includes('homepage_content')) {
      console.log('‚úÖ Configura√ß√µes RLS definidas para homepage_content');
    }
  } else {
    console.log('‚ö†Ô∏è  Arquivo de configura√ß√£o RLS n√£o encontrado');
  }
} catch (error) {
  console.error('‚ùå Erro ao verificar configura√ß√µes RLS:', error.message);
}

console.log('\nüéâ Verifica√ß√£o das corre√ß√µes conclu√≠da!');
console.log('\nüìã Resumo das corre√ß√µes implementadas:');
console.log('1. ‚úÖ Upload: Cliente administrativo usado para bypass RLS');
console.log('2. ‚úÖ Exclus√£o: Cliente administrativo usado para opera√ß√µes DELETE');
console.log('3. ‚úÖ Estat√≠sticas: Valida√ß√£o JSON e logs adicionados');
console.log('4. ‚úÖ Tratamento de erros: Melhorado para todos os endpoints');

console.log('\nüöÄ Pr√≥ximos passos:');
console.log('1. Reiniciar o servidor para aplicar as mudan√ßas');
console.log('2. Testar upload de arquivo real');
console.log('3. Testar exclus√£o de documento');
console.log('4. Verificar se estat√≠sticas carregam corretamente');
