import fetch from 'node-fetch';

console.log('üß™ TESTE DE EXIBI√á√ÉO DOS CARDS NA HOMEPAGE');
console.log('============================================');

async function testHomepageCards() {
  try {
    console.log('\n1Ô∏è‚É£ Testando API de cards p√∫blicos...');

    const response = await fetch('http://localhost:5000/api/homepage-content');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const cards = await response.json();
    console.log(`‚úÖ Cards p√∫blicos encontrados: ${cards.length}`);

    cards.forEach((card, index) => {
      console.log(`\n   üìã Card ${index + 1}:`);
      console.log(`      ID: ${card.id}`);
      console.log(`      T√≠tulo: "${card.title}"`);
      console.log(`      Descri√ß√£o: "${card.description}"`);
      console.log(`      Se√ß√£o: ${card.section}`);
      console.log(`      Imagem: ${card.image_url ? '‚úÖ Sim' : '‚ùå N√£o'}`);
      console.log(`      Conte√∫do: ${card.content ? '‚úÖ Sim' : '‚ùå N√£o'}`);
      console.log(`      Destaque: ${card.featured ? '‚úÖ Sim' : '‚ùå N√£o'}`);
      console.log(`      Publicado: ${card.is_published ? '‚úÖ Sim' : '‚ùå N√£o'}`);

      if (card.image_url) {
        console.log(`      URL da imagem: ${card.image_url}`);
      }

      if (card.content) {
        console.log(`      Conte√∫do completo: "${card.content}"`);
      }
    });

    console.log('\n2Ô∏è‚É£ Verificando se h√° cards com imagens...');
    const cardsWithImages = cards.filter(card => card.image_url);
    console.log(`‚úÖ Cards com imagens: ${cardsWithImages.length}`);

    if (cardsWithImages.length > 0) {
      console.log('   As imagens devem aparecer na homepage!');
    } else {
      console.log('   ‚ö†Ô∏è Nenhum card tem imagem configurada');
    }

    console.log('\n3Ô∏è‚É£ Verificando se h√° cards com conte√∫do completo...');
    const cardsWithContent = cards.filter(card => card.content);
    console.log(`‚úÖ Cards com conte√∫do completo: ${cardsWithContent.length}`);

    if (cardsWithContent.length > 0) {
      console.log('   O conte√∫do completo deve aparecer ao clicar em "Ler mais"!');
    } else {
      console.log('   ‚ö†Ô∏è Nenhum card tem conte√∫do completo configurado');
    }

    console.log('\n4Ô∏è‚É£ Verificando se h√° cards em destaque...');
    const featuredCards = cards.filter(card => card.featured);
    console.log(`‚úÖ Cards em destaque: ${featuredCards.length}`);

    if (featuredCards.length > 0) {
      console.log('   Os cards em destaque devem ter badge especial!');
    } else {
      console.log('   ‚ö†Ô∏è Nenhum card est√° marcado como destaque');
    }

    console.log('\nüéØ RESULTADO DO TESTE:');
    if (cards.length > 0) {
      console.log('‚úÖ A API est√° retornando cards corretamente');
      console.log('‚úÖ Os cards devem aparecer na homepage com:');
      console.log('   - T√≠tulo e descri√ß√£o');
      console.log('   - Imagem (se configurada)');
      console.log('   - Conte√∫do completo (ao expandir)');
      console.log('   - Badge de destaque (se aplic√°vel)');
    } else {
      console.log('‚ùå Nenhum card encontrado na API');
      console.log('   Verifique se h√° cards publicados no painel administrativo');
    }

  } catch (error) {
    console.error('üí• Erro no teste:', error.message);

    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° DICA: O servidor n√£o est√° rodando na porta 5000');
      console.log('   Execute: npm run dev');
    }
  }
}

// Executar teste
testHomepageCards();
