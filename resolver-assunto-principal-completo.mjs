// üöÄ RESOLVER ASSUNTO PRINCIPAL - SCRIPT COMPLETO AUTOMATIZADO
// Este script resolve o problema do campo que n√£o abre as op√ß√µes

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fbqocpozjmuzrdeacktb.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZicW9jcG96am11enJkZWFja3RiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTg1Njc4NiwiZXhwIjoyMDY1NDMyNzg2fQ.V37kx1A0n8LzOBGWOzDFSopUBQkQ4TgNMBl8vWMpKqY';

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üöÄ RESOLVENDO CAMPO ASSUNTO PRINCIPAL - SCRIPT COMPLETO');
console.log('='.repeat(70));

async function resolverCompleto() {
  try {
    // 1. VERIFICAR SERVIDOR
    console.log('\nüì° 1. VERIFICANDO SERVIDOR...');
    let servidorOk = false;

    try {
      const response = await fetch('http://localhost:5000/api/main-subjects');
      if (response.ok) {
        console.log('   ‚úÖ Servidor rodando na porta 5000');
        servidorOk = true;
      } else {
        console.log(`   ‚ö†Ô∏è Servidor retornou erro: ${response.status}`);
      }
    } catch (error) {
      console.log('   ‚ùå Servidor n√£o est√° rodando');
      console.log('   üí° Execute: npm run dev');
      console.log('   üîÑ Aguardando 5 segundos e tentando novamente...');

      await new Promise(resolve => setTimeout(resolve, 5000));

      try {
        const retryResponse = await fetch('http://localhost:5000/api/main-subjects');
        if (retryResponse.ok) {
          console.log('   ‚úÖ Servidor agora est√° rodando!');
          servidorOk = true;
        }
      } catch (retryError) {
        console.log('   ‚ùå Servidor ainda n√£o est√° rodando');
        console.log('   üö® Execute manualmente: npm run dev');
        return;
      }
    }

    // 2. CRIAR TABELAS NO SUPABASE
    console.log('\nüóÑÔ∏è 2. CRIANDO TABELAS NO SUPABASE...');

    // Lista de tabelas para criar
    const tabelas = [
      {
        nome: 'main_subjects',
        dados: [
          'Administra√ß√£o P√∫blica', 'Or√ßamento e Finan√ßas', 'Recursos Humanos',
          'Tecnologia da Informa√ß√£o', 'Meio Ambiente', 'Sa√∫de', 'Educa√ß√£o',
          'Seguran√ßa P√∫blica', 'Infraestrutura', 'Cultura e Esporte'
        ]
      },
      {
        nome: 'document_types',
        dados: ['Of√≠cio', 'Memorando', 'Relat√≥rio', 'Ata', 'Decreto', 'Lei']
      },
      {
        nome: 'public_organs',
        dados: ['Presid√™ncia da Rep√∫blica', 'Minist√©rio da Fazenda', 'C√¢mara dos Deputados']
      },
      {
        nome: 'responsible_sectors',
        dados: ['Departamento Jur√≠dico', 'Secretaria Executiva', 'Gabinete']
      },
      {
        nome: 'confidentiality_levels',
        dados: ['P√∫blico', 'Restrito', 'Confidencial', 'Secreto']
      }
    ];

    // Criar cada tabela
    for (const tabela of tabelas) {
      console.log(`\nüìù Criando tabela ${tabela.nome}...`);

      try {
        // Tentar inserir dados para ver se a tabela existe
        const { data, error } = await supabase
          .from(tabela.nome)
          .select('*')
          .limit(1);

        if (error) {
          console.log(`   ‚ö†Ô∏è Tabela ${tabela.nome} n√£o existe`);
          console.log(`   üí° Execute este SQL no Supabase Dashboard:`);
          console.log(`
CREATE TABLE IF NOT EXISTS ${tabela.nome} (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  created_at TIMESTAMP DEFAULT NOW()
);`);
          continue;
        }

        console.log(`   ‚úÖ Tabela ${tabela.nome} existe`);

        // Verificar se tem dados
        const { data: countData, error: countError } = await supabase
          .from(tabela.nome)
          .select('*');

        if (countError) {
          console.log(`   ‚ùå Erro ao contar dados: ${countError.message}`);
          continue;
        }

        console.log(`   üìä Tabela tem ${countData.length} registros`);

        // Se n√£o tem dados, inserir
        if (countData.length === 0) {
          console.log(`   üìù Inserindo dados em ${tabela.nome}...`);

          for (const nome of tabela.dados) {
            const { error: insertError } = await supabase
              .from(tabela.nome)
              .insert({ name: nome });

            if (insertError) {
              console.log(`      ‚ùå ${nome}: ${insertError.message}`);
            } else {
              console.log(`      ‚úÖ ${nome}`);
            }
          }
        }

      } catch (tableError) {
        console.log(`   ‚ùå Erro na tabela ${tabela.nome}: ${tableError.message}`);
      }
    }

    // 3. TESTAR API COMPLETA
    console.log('\nüß™ 3. TESTANDO API COMPLETA...');

    if (servidorOk) {
      // Testar todas as APIs
      const apis = [
        '/api/main-subjects',
        '/api/document-types',
        '/api/public-organs',
        '/api/responsible-sectors',
        '/api/confidentiality-levels'
      ];

      for (const api of apis) {
        try {
          const response = await fetch(`http://localhost:5000${api}`);
          if (response.ok) {
            const data = await response.json();
            console.log(`   ‚úÖ ${api}: ${data.length} registros`);
          } else {
            console.log(`   ‚ùå ${api}: ${response.status}`);
          }
        } catch (apiError) {
          console.log(`   ‚ùå ${api}: ${apiError.message}`);
        }
      }
    }

    // 4. VERIFICAR COMPONENTE REACT
    console.log('\n‚öõÔ∏è 4. VERIFICANDO COMPONENTE REACT...');

    console.log('   üìã Componentes que usam a API:');
    console.log('      ‚úÖ AdvancedSelectWithAdd - apiEndpoint="/api/main-subjects"');
    console.log('      ‚úÖ SelectWithAddDB - apiEndpoint="/api/main-subjects"');
    console.log('      ‚úÖ SelectWithAddInline - apiEndpoint="/api/main-subjects"');

    // 5. RESULTADO FINAL
    console.log('\nüéØ 5. RESULTADO FINAL:');

    // Verificar se main_subjects tem dados
    try {
      const { data: finalData, error: finalError } = await supabase
        .from('main_subjects')
        .select('*');

      if (finalError) {
        console.log('   ‚ùå PROBLEMA PERSISTE - Tabela n√£o foi criada');
        console.log('   üîß SOLU√á√ÉO: Execute o SQL manualmente no Supabase Dashboard');
      } else if (finalData.length > 0) {
        console.log('   ‚úÖ PROBLEMA RESOLVIDO!');
        console.log(`   üéâ Campo Assunto Principal tem ${finalData.length} op√ß√µes`);
        console.log('   üí° Recarregue a p√°gina para ver as op√ß√µes');

        console.log('\n   üìã OP√á√ïES DISPON√çVEIS:');
        finalData.forEach((item, index) => {
          console.log(`      ${index + 1}. ${item.name}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è Tabela criada mas sem dados');
        console.log('   üîß Execute o SQL de inser√ß√£o no Supabase');
      }
    } catch (finalError) {
      console.log('   ‚ùå Erro ao verificar resultado final');
    }

    // 6. INSTRU√á√ïES FINAIS
    console.log('\nüìã 6. INSTRU√á√ïES FINAIS:');
    console.log('   1. Se o problema persistir, execute o SQL manualmente no Supabase');
    console.log('   2. Recarregue a p√°gina do formul√°rio (Ctrl+F5)');
    console.log('   3. Clique no campo "Assunto Principal"');
    console.log('   4. As op√ß√µes devem aparecer no dropdown');

  } catch (error) {
    console.error('‚ùå ERRO GERAL:', error.message);
  }
}

// Executar solu√ß√£o completa
console.log('‚è≥ Iniciando solu√ß√£o autom√°tica...');
resolverCompleto();
